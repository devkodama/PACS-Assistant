/**
 * Compile.ahk
 * 
 * Helper script to prepare PACS Assistant for compilation.
 * 
 * Run this standalone to regenerate the Resources.ahk file
 * which has compile-time directives to embed all of the necessary
 * files with the executable.
 * 
 * This script was generated with help of Google's AI Overview given the
 * search ";@Ahk2Exe-AddResource add many files"
 * [https://www.google.com/search?q=%3B%40Ahk2Exe-AddResource+add+many+files&sca_esv=4de9b1bcb3508fbc&rlz=1C1GCEA_enUS1128US1128&sxsrf=AE3TifODYEzA2JMr6rTHluES6hSzBWpsRw%3A1757192864279&ei=oKK8aLHuEIntptQP_szMyQk&ved=0ahUKEwixvujDhcWPAxWJtokEHX4mM5kQ4dUDCBA&uact=5&oq=%3B%40Ahk2Exe-AddResource+add+many+files&gs_lp=Egxnd3Mtd2l6LXNlcnAiJDtAQWhrMkV4ZS1BZGRSZXNvdXJjZSBhZGQgbWFueSBmaWxlczIFECEYoAEyBRAhGKABMgUQIRirAkjZHVDkAljrG3ABeACQAQGYAZ8BoAGkCqoBBDE0LjK4AQPIAQD4AQL4AQGYAhCgAqUJwgIOEAAYgAQYsAMYhgMYigXCAgsQABiwAxiiBBiJBcICCxAAGIAEGLADGKIEwgIIEAAYsAMY7wXCAgcQIxgnGK4CwgIIEAAYgAQYogTCAgUQABjvBcICBxAhGKABGAqYAwCIBgGQBgeSBwQxNS4xoAf4RLIHBDE0LjG4B6IJwgcEMy4xM8gHEw&sclient=gws-wiz-serp]
 * 
 * This module defines the functions:
 * 
 * 
 */


#Requires AutoHotkey v2.0
#SingleInstance Force




/**********************************************************
 * Auto execute section
 * 
*/


; This script generates the compile-time directives for the folders and files in resourcesList[].
;
; The directives are placed in the file outputScriptFile between
; the resourceBlockStart and resourceBlockEnd markers.
;

outputScriptFile := "Resources.ahk"
resourceBlockStart := "; ### RESOURCE BLOCK START ###"
resourceBlockEnd := "; ### RESOURCE BLOCK END ###"




; WebViewToo resources list
;
; Array items in WVTresourcesList can be strings or arrays:
;   If an item is a string, it is interpreted as a file or folder specification which may
;   contain wildcards ("*"). Directories are processed recursively.
;
;   If the item is an array, the first element is the filename and the second item 
;   is the resourcename to be passed to the ;@Ahk2Exe-AddResource directive. If there 
;   is no second element, the resourcename is taken to be the same as the filename.
;
; These need to be added with ;@Ahk2Exe-AddResource directives, and also created 
;   at runtime in the runtime temp directory by calling WebViewToo.CreateFileFromResource().
;
; At runtime, these files will be created inside a temp directory at
;   C:\Users\<winuser>\AppData\Local\Temp\<dirname>.
WVTresourcesList := [
    ["Lib\64bit\WebView2Loader.dll", "64bit\WebView2Loader.dll"],
    ["Lib\32bit\WebView2Loader.dll", "32bit\WebView2Loader.dll"],
    "pages\*",
]

; List of files that need to be copied to the working directory at runtime.
;
; Items in this array are strings, interpreted as a file specification.
; Directories are processed recursively.
;
; At runtime, these files will be created in the working directory of the compiled exe file.
filesList := [
    "PA.ico",
    "icd10codes.txt",
    "README.md",
    "version.txt",
]




; Read the existing content of the output script.
try {
    scriptContent := FileRead(outputScriptFile)
} catch {
    scriptContent := ""
}


; Find the start and end of the resource block, if they already exist.
blockStartPos := InStr(scriptContent, resourceBlockStart)
blockEndPos := InStr(scriptContent, resourceBlockEnd)

if !blockStartPos && !blockEndPos {
    ; If both are not present, add the pair of markers to the end of the file.
    scriptContent .= resourceBlockStart "`n"
    scriptContent .= resourceBlockEnd "`n"
} else if !blockStartPos {
    ; End marker but no start marker. Insert a start marker on the line before the end marker.
    scriptContent := StrReplace(scriptContent, resourceBlockEnd, resourceBlockStart . "`n" . resourceBlockEnd)
} else if !blockEndPos {
    ; Start marker but no end marker. Insert an end marker on the line after the start marker.
    scriptContent := StrReplace(scriptContent, resourceBlockStart, resourceBlockStart . "`n" . resourceBlockEnd)
}

blockStartPos := InStr(scriptContent, resourceBlockStart)
blockEndPos := InStr(scriptContent, resourceBlockEnd)
if !blockStartPos || !blockEndPos {
    ; error condition
    MsgBox("Could not find or add resource start and end markers. " outputScriptFile " was not created or modified.")
    ExitApp()
}

; Now we have both a start and and end marker for the resource block


; Generate the new resource directives.
newDirectives := '; This block is autogenerated and replaced each time the Compile.ahk script is run.`n`n'


; Process WVTresourcesList, build directives to add resources
wvtAddDirectives := ''
wvtCreateDirectives := ''
for item in WVTresourcesList {

    if IsObject(item) {
        ; assume item is an Array[]
        try {
            filename := item[1]
        } catch {
            filename := ''
        }
        try {
            resourcename := item[2]
        } catch {
            resourcename := filename
        }
        wvtAddDirectives .= ';@Ahk2Exe-AddResource ' . filename . ', ' . resourcename . '`n'
        wvtCreateDirectives .= '`tWebViewToo.CreateFileFromResource("' . resourcename . '")`n'

    } else {
        ; assume resource is a string specifying a filepath

        ; if a simple file (no backslash indicating a directory), don't loop
        if !InStr(item, "\") {
            ; a simple file
            filename := item
            resourcename := filename

            wvtAddDirectives .= ';@Ahk2Exe-AddResource ' . filename . ', ' . resourcename . '`n'
            wvtCreateDirectives .= '`tWebViewToo.CreateFileFromResource("' . resourcename . '")`n'
        } else {
            ; a path with a directory, loop through it
            Loop Files item, "R" {      
                filename := (A_LoopFileDir ? A_LoopFileDir . '\' : '') . A_LoopFileName
                resourcename := filename

                wvtAddDirectives .= ';@Ahk2Exe-AddResource ' . filename . ', ' . resourcename . '`n'
                wvtCreateDirectives .= '`tWebViewToo.CreateFileFromResource("' . resourcename . '")`n'
            }
        }
    }
}

newDirectives .= ";@Ahk2Exe-AddResource " . filename . ", " filename . "`n"

; Process filesList, build directives to add resources and create directories
fileInstallDirectives := ''
directoryList := Map()
for item in filesList {
    ; resource is expected to be a string specifying a filepath

    ; if a simple file (no backslash indicating a directory), don't loop
    if !InStr(item, "\") {
        ; a simple file
        sourcefile := item
        destfile := sourcefile

        fileInstallDirectives .= 'FileInstall "' . sourcefile . '", "' . destfile . '", 1`n'    ; 1 = overwrite
    } else {
        ; a path with a directory, loop through it
        Loop Files item, "R" {
            ; add the directory to list of directories
            directoryList[A_LoopFileDir] := true
            sourcefile := (A_LoopFileDir ? A_LoopFileDir . "\" : "") . A_LoopFileName
            destfile := sourcefile

            fileInstallDirectives .= 'FileInstall "' . sourcefile . '", "' . destfile . '", 1`n'    ; 1 = overwrite
        }
    }
}

dirCreateDirectives := ''
if directoryList.Count > 0 {
    for dir, in directoryList {
        newDirDirectives .= 'if !DirExist("' . dir . '") {`n`tDirCreate("' . dir . '")`n}`n'
    }
}

; assemble all the new directives
if wvtAddDirectives {
    newDirectives .= wvtAddDirectives . '`n'
}
if fileInstallDirectives {
    newDirectives .= fileInstallDirectives . '`n'
}
if (dirCreateDirectives) {
    newDirectives .= dirCreateDirectives . '`n'
}
if (wvtCreateDirectives) {
    newDirectives .= 'if (A_IsCompiled) {`n'
    newDirectives .= wvtCreateDirectives
    newDirectives .= '}`n'
}

; combine the new directives with pre-existing script (outside the resource block markers)
beforeBlock := SubStr(scriptContent, 1, blockStartPos + StrLen(resourceBlockStart))
afterBlock := SubStr(scriptContent, blockEndPos)

newScriptContent := beforeBlock . newDirectives . afterBlock

; Write the updated script content back to the file.
if FileExist(outputScriptFile) {
    FileDelete(outputScriptFile)
}
FileAppend(newScriptContent, outputScriptFile)

MsgBox("Success, resource directives have been updated in " outputScriptFile ".")
